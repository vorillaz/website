---
import type { CollectionEntry } from "astro:content";
import { slugify } from "@/lib/utils";
import PostLayout from "@/layouts/PostLayout.astro";
import Note from "./Note.astro";
import Img from "./Img.astro";
import Code from "./CodeHeader.astro";
import PostViews from "./PostViews.astro";
import InlineCode from "./InlineCode.astro";
import Prompt from "./Prompt.astro";

export interface Props {
  post: CollectionEntry<"blog">;
}
const { post } = Astro.props;
const { Content } = await post.render();
const {
  title,
  heroImage,
  imgCredits,
  metaDescription,
  pubDate,
  updatedDate,
  description,
  categories,
  keywords,
  prompt,
  heroImageGenerator,
} = post.data;

const pubstr = pubDate.toISOString();
const updatedstr = updatedDate?.toISOString();
---

<PostLayout
  title={title}
  description={description}
  keywords={keywords}
  metaDescription={metaDescription}
>
  <article id="article" role="article" class="content">
    <h1 transition:name={slugify(title)} class="post-title">{title}</h1>
    <!-- Date and time -->
    <div class="post-info article-info gap-1 full">
      <div class="flex gap-1">
        <span>
          Published on{" "}
          <time datetime={pubstr}>
            {
              new Date(pubDate).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })
            }
          </time>
        </span>
        {
          updatedDate && (
            <span>
              &middot; Updated on{" "}
              <time datetime={updatedstr}>
                {new Date(updatedDate).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </time>
            </span>
          )
        }
        <PostViews slug={post.slug} />
      </div>
      {
        prompt && heroImageGenerator && (
          <span class="ml-auto sm-hide">
            <Prompt heroImageGenerator={heroImageGenerator} prompt={prompt} />
          </span>
        )
      }
    </div>
    <>
      {heroImage && <Img src={heroImage} alt={title} credits={imgCredits} />}
    </>
    <Content
      components={{
        Note,
        img: Img,
        "custom-code-renderer": Code,
        "inline-code": InlineCode,
      }}
    />

    {
      categories && categories.length > 0 && (
        <div class="flex gap-half mt flex-wrap">
          {categories.map((category) => (
            <span class="badge bigger">
              <a href={`/category/${slugify(category)}`} class="category">
                {category}
              </a>
            </span>
          ))}
        </div>
      )
    }
  </article>
</PostLayout>
